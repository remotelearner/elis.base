diff --git a/lib/cronlib.php b/lib/cronlib.php
index 39321cb..e8455e5 100644
--- a/lib/cronlib.php
+++ b/lib/cronlib.php
@@ -169,6 +169,9 @@ function cron_run() {
             mtrace(' Cleaned up read notifications');
         }
 
+        mtrace(' Deleting temporary files...');
+        cron_delete_from_temp();
+
         mtrace("...finished clean-up tasks");
 
     } // End of occasional clean-up tasks
@@ -423,6 +426,11 @@ function cron_run() {
     cron_execute_plugin_type('tool', 'admin tools');
 
 
+    // run the ELIS cron jobs
+    mtrace("Running ELIS cron tasks...");
+    require_once($CFG->dirroot.'/elis/core/cron.php');
+    elis_cron();
+
     // and finally run any local cronjobs, if any
     if ($locals = get_plugin_list('local')) {
         mtrace('Processing customized cron scripts ...', '');
@@ -732,3 +740,48 @@ function notify_login_failures() {
 
     return true;
 }
+
+/**
+ * Delete files and directories older than one week from directory provided by $CFG->tempdir.
+ *
+ * @exception Exception Failed reading/accessing file or directory
+ * @return bool True on successful file and directory deletion; otherwise, false on failure
+ */
+function cron_delete_from_temp() {
+    global $CFG;
+
+    $tmpdir = $CFG->tempdir;
+    // Default to last weeks time.
+    $time = strtotime('-1 week');
+
+    try {
+        $dir = new RecursiveDirectoryIterator($tmpdir);
+        // Show all child nodes prior to their parent.
+        $iter = new RecursiveIteratorIterator($dir, RecursiveIteratorIterator::CHILD_FIRST);
+
+        for ($iter->rewind(); $iter->valid(); $iter->next()) {
+            $node = $iter->getRealPath();
+            if (!is_readable($node)) {
+                continue;
+            }
+            // Check if file or directory is older than the given time.
+            if ($iter->getMTime() < $time) {
+                if ($iter->isDir() && !$iter->isDot()) {
+                    if (@rmdir($node) === false) {
+                        mtrace("Failed removing directory '$node'.");
+                    }
+                }
+                if ($iter->isFile()) {
+                    if (@unlink($node) === false) {
+                        mtrace("Failed removing file '$node'.");
+                    }
+                }
+            }
+        }
+    } catch (Exception $e) {
+        mtrace('Failed reading/accessing file or directory.');
+        return false;
+    }
+
+    return true;
+}
